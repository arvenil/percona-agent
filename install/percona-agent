#!/bin/sh
#
# percona-agent  This shell script takes care of starting and stopping
#                the percona-agent service.
#
# chkconfig: 2345 65 35
# description: Agent for Percona Cloud Tools
#
### BEGIN INIT INFO
# Provides:          percona-agent
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop percona-agent
# Description:       Agent for Percona Cloud Tools
### END INIT INFO

export LANG=en_US

SERVICE="percona-agent"

# Agent needs to run as root to read MySQL slow log for Query Analytics (QAN).
# If not running QAN, a normal user will work.
USERNAME="${PCT_TEST_AGENT_USER:-root}"

# Agent uses a single base directory for all its files and data.
BASEDIR="${PCT_TEST_AGENT_DIR:-"/usr/local/percona/$SERVICE"}"

if [ ! -d "$BASEDIR" ]; then
   mkdir -p "$BASEDIR" || exit 1
fi

# Make sure the percona-agent binary exists.
CMD="$BASEDIR/bin/$SERVICE"
if [ ! -x "$CMD" ]; then
   echo "$CMD does not exist or is not executable. Check that $SERVICE" \
        "has been installed correctly." >&2
   exit 1
fi

# Start and stop timeouts for the service
START_TIMEOUT="${PCT_TEST_START_TIMEOUT:-5}"
STOP_TIMEOUT="${PCT_TEST_STOP_TIMEOUT:-60}"

# Agent may use a different log file, or no log file (online logging only),
# but we should capture any output, e.g. in case it crashes.
LOGFILE="$BASEDIR/$SERVICE.log"

# Agent does not manager its own PID file; system is expected to manager this.
PIDFILE="$BASEDIR/$SERVICE.pid"
pid=""

# Allow configuration overrides in /etc/sysconfig/$SERVICE
CONFIGFILE="/etc/sysconfig/$SERVICE"
[ -x $CONFIGFILE ] && . $CONFIGFILE
 
# Get the fully qualified path to the script
case $0 in
    /*)
        SCRIPT="$0"
        ;;
    *)
        PWD=`pwd`
        SCRIPT="$PWD/$0"
        ;;
esac
 
# Change spaces to ":" so the tokens can be parsed.
SCRIPT=`echo $SCRIPT | sed -e 's; ;:;g'`

# Get the real path to this script, resolving any symbolic links
TOKENS=`echo $SCRIPT | sed -e 's;/; ;g'`
REALPATH=
for C in $TOKENS; do
    REALPATH="$REALPATH/$C"
    while [ -h "$REALPATH" ] ; do
        LS="`ls -ld "$REALPATH"`"
        LINK="`expr "$LS" : '.*-> \(.*\)$'`"
        if expr "$LINK" : '/.*' > /dev/null; then
            REALPATH="$LINK"
        else
            REALPATH="`dirname "$REALPATH"`""/$LINK"
        fi
    done
done

# Change ":" chars back to spaces.
REALPATH=`echo $REALPATH | sed -e 's;:; ;g'`
 
# Change the current directory to the location of the script
cd "`dirname "$REALPATH"`"

# Check for ps in path
ps >/dev/null 2>&1
if [ $? -ne 0 ]; then
     echo "Unable to locate 'ps'." >&2
     echo "Please report this with the location on your system." >&2
     exit 1
fi

# Build the nice clause
if [ "X$PRIORITY" = "X" ]
then
    CMDNICE=""
else
    CMDNICE="nice -$PRIORITY"
fi

# seq N, return 1, ..., 5
_seq() {
   local i="$1"
   awk "BEGIN { for(i=1; i<=$i; i++) print i; }"
}

testpid() {
	# This function will check if the process under $pid runs $SERVICE
    # if not, it will delete $PIDFILE and set $pid to empty string
    psoutput=`ps -p "$pid" -o pid,comm | grep -w "$pid"` 
    pid=`echo "$psoutput" | awk '{print $1}'`
    # Make sure $SERVICE shows up in command name
    match=`echo "$psoutput" | awk '{print $2}' | grep "$SERVICE"`
    if [ -z "$match" ]; then
       pid=""
       # This is a stale pid file.
       rm -f "$PIDFILE"
       # Check if message to display was provided
       if [ ! -z "$1" ]; then
          echo "$1"
       fi
    fi
}

getpid() {
   if [ -f $PIDFILE ]; then
      if [ ! -r $PIDFILE ]; then
         echo "Cannot read $PIDFILE." >&2
         exit 1
      fi
      pid=`cat $PIDFILE`
	  # Verify that a process with this pid is still running percona-agent
      testpid "Removed stale pid file: $PIDFILE"
   fi
}

start() {
   chown "$USERNAME" "$BASEDIR" || exit 1

   echo "Starting $SERVICE..."
   getpid
   if [ "$pid" ]; then
      echo "$SERVICE is already running."
      exit 0
   fi

   # Run agent in background; it does not daemonize itself. 
   $CMD -basedir "$BASEDIR" -pidfile "$PIDFILE" >> "$LOGFILE" 2>&1 &

   # as we are starting agent in background,
   # so let's give an agent some time to start
   echo "Waiting for $SERVICE to start..."
   for x in $(_seq $START_TIMEOUT); do
       getpid
       if [ -n "$pid" ]; then
           break
       fi
       sleep 1
   done

   # Process is started in background so $? does not have its exit status.
   # Instead, check that it's running by trying to get its PID.
   if [ -z "$pid" ]; then
      echo "Fail.  Check $LOGFILE for details."
      exit 1
   else
      echo "OK"
   fi
}

stop() {
    echo "Stopping $SERVICE..."
    getpid
    if [ "X$pid" = "X" ]; then
        echo "$SERVICE is not running."
        return 0
    else
         # Running so try to stop it.
        kill $pid >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            # An explanation for the failure should have been given
            echo "Unable to stop $SERVICE."
            return 1
        fi
 
        #  Loop until it does.
        echo "Waiting for $SERVICE to exit..."
        savepid=$pid
        for x in $(_seq $STOP_TIMEOUT); do
            testpid
            if [ -z "$pid" ]; then
                break
            fi
            sleep 1
        done
 
        pid=$savepid
        testpid
        if [ "X$pid" != "X" ]; then
            echo "Time out waiting for $SERVICE to exit.  Trying kill -9 $pid..."
            kill -9 $pid
        fi
 
        pid=$savepid
        testpid
        if [ "X$pid" != "X" ]; then
            echo "Failed to stop $SERVICE."
            return 1
        else
            echo "Stopped $SERVICE."
            return 0
        fi
    fi
}
 
status() {
   getpid
   if [ "$pid" ]; then
      echo "$SERVICE is running ($pid)."
      exit 0
   else
      echo "$SERVICE is not running."
      exit 1
   fi
}
 
case "$1" in
    'start')
        start
        ;;
    'stop')
        stop
        ;;
    'restart')
        stop
        if [ $? -eq 0 ]; then
            start
        fi
        ;;
    'status')
        status
        ;;
    *)
        echo "Usage: $0 start|stop|restart|status"
        exit 1
        ;;
esac
 
exit 0
